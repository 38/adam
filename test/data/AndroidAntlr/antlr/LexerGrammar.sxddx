(class (attrs ) antlr/LexerGrammar
 (super antlr/Grammar)
 (source "LexerGrammar.java")

 (field (attrs protected ) caseSensitive boolean )
 (field (attrs protected ) caseSensitiveLiterals boolean )
 (field (attrs protected ) charVocabulary [object antlr/collections/impl/BitSet] )
 (field (attrs protected ) filterMode boolean )
 (field (attrs protected ) filterRule [object java/lang/String] )
 (field (attrs protected ) testLiterals boolean )

(method (attrs ) <init>([object java/lang/String] [object antlr/Tool] [object java/lang/String] )void
  (limit registers 6)
  ; this: v2 ([object antlr/LexerGrammar])
  ; parameter[0] : v3 ([object java/lang/String])
  ; parameter[1] : v4 ([object antlr/Tool])
  ; parameter[2] : v5 ([object java/lang/String])
  (const/4 v1 0)
  (const/4 v0 1)
  (line 37)
  (invoke-direct {v2 v3 v4 v5} antlr/Grammar/<init> [object java/lang/String] [object antlr/Tool] [object java/lang/String] )
  (line 22)
  (iput-boolean v0 v2 antlr/LexerGrammar.testLiterals boolean)
  (line 24)
  (iput-boolean v0 v2 antlr/LexerGrammar.caseSensitiveLiterals boolean)
  (line 26)
  (iput-boolean v0 v2 antlr/LexerGrammar.caseSensitive boolean)
  (line 28)
  (iput-boolean v1 v2 antlr/LexerGrammar.filterMode boolean)
  (line 34)
  (const/4 v0 0)
  (iput-object v0 v2 antlr/LexerGrammar.filterRule [object java/lang/String])
  (line 38)
  (new-instance v0 antlr/collections/impl/BitSet)
  (invoke-direct {v0} antlr/collections/impl/BitSet/<init> )
  (iput-object v0 v2 antlr/LexerGrammar.charVocabulary [object antlr/collections/impl/BitSet])
  (line 41)
  (iput-boolean v1 v2 antlr/LexerGrammar.defaultErrorHandler boolean)
  (line 42)
  (return-void )
 )

(method (attrs public ) generate()void
  (annotation systemVisibility [object dalvik/annotation/Throws]
    (value [array [object java/lang/String]] [object java/io/IOException])
  )
  (limit registers 2)
  ; this: v1 ([object antlr/LexerGrammar])
  (line 46)
  (iget-object v0 v1 antlr/LexerGrammar.generator [object antlr/CodeGenerator])
  (invoke-virtual {v0 v1} antlr/CodeGenerator/gen [object antlr/LexerGrammar] )
  (line 47)
  (return-void )
)

(method (attrs public ) getSuperClass()[object java/lang/String]
  (limit registers 2)
  ; this: v1 ([object antlr/LexerGrammar])
  (line 51)
  (iget-boolean v0 v1 antlr/LexerGrammar.debuggingOutput boolean)
  (if-eqz v0 l43ac2)
  (line 52)
  (const-string v0 "debug.DebuggingCharScanner")
  (label l43ac0)
  (line 53)
  (return-object v0)
  (label l43ac2)
  (const-string v0 "CharScanner")
  (goto l43ac0)
)

(method (attrs public ) getTestLiterals()boolean
  (limit registers 2)
  ; this: v1 ([object antlr/LexerGrammar])
  (line 58)
  (iget-boolean v0 v1 antlr/LexerGrammar.testLiterals boolean)
  (return v0)
)

(method (attrs public ) processArguments([array [object java/lang/String]] )void
  (limit registers 6)
  ; this: v4 ([object antlr/LexerGrammar])
  ; parameter[0] : v5 ([array [object java/lang/String]])
  (const/4 v3 1)
  (line 67)
  (const/4 v0 0)
  (label l43af4)
  (array-length v1 v5)
  (if-lt v0 v1 l43afc)
  (line 81)
  (return-void )
  (label l43afc)
  (line 68)
  (aget-object v1 v5 v0)
  (const-string v2 "-trace")
  (invoke-virtual {v1 v2} java/lang/String/equals [object java/lang/Object] )
  (move-result v1)
  (if-eqz v1 l43b24)
  (line 69)
  (iput-boolean v3 v4 antlr/LexerGrammar.traceRules boolean)
  (line 70)
  (iget-object v1 v4 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (invoke-virtual {v1 v0} antlr/Tool/setArgOK int )
  (label l43b1e)
  (line 67)
  (add-int/lit8 v0 v0 1)
  (goto l43af4)
  (label l43b24)
  (line 72)
  (aget-object v1 v5 v0)
  (const-string v2 "-traceLexer")
  (invoke-virtual {v1 v2} java/lang/String/equals [object java/lang/Object] )
  (move-result v1)
  (if-eqz v1 l43b48)
  (line 73)
  (iput-boolean v3 v4 antlr/LexerGrammar.traceRules boolean)
  (line 74)
  (iget-object v1 v4 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (invoke-virtual {v1 v0} antlr/Tool/setArgOK int )
  (goto l43b1e)
  (label l43b48)
  (line 76)
  (aget-object v1 v5 v0)
  (const-string v2 "-debug")
  (invoke-virtual {v1 v2} java/lang/String/equals [object java/lang/Object] )
  (move-result v1)
  (if-eqz v1 l43b1e)
  (line 77)
  (iput-boolean v3 v4 antlr/LexerGrammar.debuggingOutput boolean)
  (line 78)
  (iget-object v1 v4 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (invoke-virtual {v1 v0} antlr/Tool/setArgOK int )
  (goto l43b1e)
)

(method (attrs public ) setCharVocabulary([object antlr/collections/impl/BitSet] )void
  (limit registers 2)
  ; this: v0 ([object antlr/LexerGrammar])
  ; parameter[0] : v1 ([object antlr/collections/impl/BitSet])
  (line 85)
  (iput-object v1 v0 antlr/LexerGrammar.charVocabulary [object antlr/collections/impl/BitSet])
  (line 86)
  (return-void )
)

(method (attrs public ) setOption([object java/lang/String] [object antlr/Token] )boolean
  (limit registers 10)
  ; this: v7 ([object antlr/LexerGrammar])
  ; parameter[0] : v8 ([object java/lang/String])
  ; parameter[1] : v9 ([object antlr/Token])
  (const/4 v2 0)
  (const/4 v1 1)
  (line 90)
  (invoke-virtual {v9} antlr/Token/getText )
  (move-result-object v0)
  (line 91)
  (const-string v3 "buildAST")
  (invoke-virtual {v8 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43bd8)
  (line 92)
  (iget-object v2 v7 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (const-string v3 "buildAST option is not valid for lexer")
  (invoke-virtual {v7} antlr/LexerGrammar/getFilename )
  (move-result-object v4)
  (invoke-virtual {v9} antlr/Token/getLine )
  (move-result v5)
  (invoke-virtual {v9} antlr/Token/getColumn )
  (move-result v6)
  (invoke-virtual {v2 v3 v4 v5 v6} antlr/Tool/warning [object java/lang/String] [object java/lang/String] int int )
  (label l43bd6)
  (line 167)
  (return v1)
  (label l43bd8)
  (line 95)
  (const-string v3 "testLiterals")
  (invoke-virtual {v8 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43c3c)
  (line 96)
  (const-string v3 "true")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43bfe)
  (line 97)
  (iput-boolean v1 v7 antlr/LexerGrammar.testLiterals boolean)
  (goto l43bd6)
  (label l43bfe)
  (line 99)
  (const-string v3 "false")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43c14)
  (line 100)
  (iput-boolean v2 v7 antlr/LexerGrammar.testLiterals boolean)
  (goto l43bd6)
  (label l43c14)
  (line 103)
  (iget-object v2 v7 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (const-string v3 "testLiterals option must be true or false")
  (invoke-virtual {v7} antlr/LexerGrammar/getFilename )
  (move-result-object v4)
  (invoke-virtual {v9} antlr/Token/getLine )
  (move-result v5)
  (invoke-virtual {v9} antlr/Token/getColumn )
  (move-result v6)
  (invoke-virtual {v2 v3 v4 v5 v6} antlr/Tool/warning [object java/lang/String] [object java/lang/String] int int )
  (goto l43bd6)
  (label l43c3c)
  (line 107)
  (const-string v3 "interactive")
  (invoke-virtual {v8 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43ca0)
  (line 108)
  (const-string v3 "true")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43c62)
  (line 109)
  (iput-boolean v1 v7 antlr/LexerGrammar.interactive boolean)
  (goto l43bd6)
  (label l43c62)
  (line 111)
  (const-string v3 "false")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43c78)
  (line 112)
  (iput-boolean v2 v7 antlr/LexerGrammar.interactive boolean)
  (goto l43bd6)
  (label l43c78)
  (line 115)
  (iget-object v2 v7 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (const-string v3 "interactive option must be true or false")
  (invoke-virtual {v7} antlr/LexerGrammar/getFilename )
  (move-result-object v4)
  (invoke-virtual {v9} antlr/Token/getLine )
  (move-result v5)
  (invoke-virtual {v9} antlr/Token/getColumn )
  (move-result v6)
  (invoke-virtual {v2 v3 v4 v5 v6} antlr/Tool/error [object java/lang/String] [object java/lang/String] int int )
  (goto l43bd6)
  (label l43ca0)
  (line 119)
  (const-string v3 "caseSensitive")
  (invoke-virtual {v8 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43d08)
  (line 120)
  (const-string v3 "true")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43cc6)
  (line 121)
  (iput-boolean v1 v7 antlr/LexerGrammar.caseSensitive boolean)
  (goto l43bd6)
  (label l43cc6)
  (line 123)
  (const-string v3 "false")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43cde)
  (line 124)
  (iput-boolean v2 v7 antlr/LexerGrammar.caseSensitive boolean)
  (goto/16 l43bd6)
  (label l43cde)
  (line 127)
  (iget-object v2 v7 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (const-string v3 "caseSensitive option must be true or false")
  (invoke-virtual {v7} antlr/LexerGrammar/getFilename )
  (move-result-object v4)
  (invoke-virtual {v9} antlr/Token/getLine )
  (move-result v5)
  (invoke-virtual {v9} antlr/Token/getColumn )
  (move-result v6)
  (invoke-virtual {v2 v3 v4 v5 v6} antlr/Tool/warning [object java/lang/String] [object java/lang/String] int int )
  (goto/16 l43bd6)
  (label l43d08)
  (line 131)
  (const-string v3 "caseSensitiveLiterals")
  (invoke-virtual {v8 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43d72)
  (line 132)
  (const-string v3 "true")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43d30)
  (line 133)
  (iput-boolean v1 v7 antlr/LexerGrammar.caseSensitiveLiterals boolean)
  (goto/16 l43bd6)
  (label l43d30)
  (line 135)
  (const-string v3 "false")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43d48)
  (line 136)
  (iput-boolean v2 v7 antlr/LexerGrammar.caseSensitiveLiterals boolean)
  (goto/16 l43bd6)
  (label l43d48)
  (line 139)
  (iget-object v2 v7 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (const-string v3 "caseSensitiveLiterals option must be true or false")
  (invoke-virtual {v7} antlr/LexerGrammar/getFilename )
  (move-result-object v4)
  (invoke-virtual {v9} antlr/Token/getLine )
  (move-result v5)
  (invoke-virtual {v9} antlr/Token/getColumn )
  (move-result v6)
  (invoke-virtual {v2 v3 v4 v5 v6} antlr/Tool/warning [object java/lang/String] [object java/lang/String] int int )
  (goto/16 l43bd6)
  (label l43d72)
  (line 143)
  (const-string v3 "filter")
  (invoke-virtual {v8 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43df8)
  (line 144)
  (const-string v3 "true")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43d9a)
  (line 145)
  (iput-boolean v1 v7 antlr/LexerGrammar.filterMode boolean)
  (goto/16 l43bd6)
  (label l43d9a)
  (line 147)
  (const-string v3 "false")
  (invoke-virtual {v0 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43db2)
  (line 148)
  (iput-boolean v2 v7 antlr/LexerGrammar.filterMode boolean)
  (goto/16 l43bd6)
  (label l43db2)
  (line 150)
  (invoke-virtual {v9} antlr/Token/getType )
  (move-result v2)
  (const/16 v3 24)
  (if-ne v2 v3 l43dce)
  (line 151)
  (iput-boolean v1 v7 antlr/LexerGrammar.filterMode boolean)
  (line 152)
  (iput-object v0 v7 antlr/LexerGrammar.filterRule [object java/lang/String])
  (goto/16 l43bd6)
  (label l43dce)
  (line 155)
  (iget-object v2 v7 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (const-string v3 "filter option must be true, false, or a lexer rule name")
  (invoke-virtual {v7} antlr/LexerGrammar/getFilename )
  (move-result-object v4)
  (invoke-virtual {v9} antlr/Token/getLine )
  (move-result v5)
  (invoke-virtual {v9} antlr/Token/getColumn )
  (move-result v6)
  (invoke-virtual {v2 v3 v4 v5 v6} antlr/Tool/warning [object java/lang/String] [object java/lang/String] int int )
  (goto/16 l43bd6)
  (label l43df8)
  (line 159)
  (const-string v3 "longestPossible")
  (invoke-virtual {v8 v3} java/lang/String/equals [object java/lang/Object] )
  (move-result v3)
  (if-eqz v3 l43e32)
  (line 160)
  (iget-object v2 v7 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (const-string v3 "longestPossible option has been deprecated; ignoring it...")
  (invoke-virtual {v7} antlr/LexerGrammar/getFilename )
  (move-result-object v4)
  (invoke-virtual {v9} antlr/Token/getLine )
  (move-result v5)
  (invoke-virtual {v9} antlr/Token/getColumn )
  (move-result v6)
  (invoke-virtual {v2 v3 v4 v5 v6} antlr/Tool/warning [object java/lang/String] [object java/lang/String] int int )
  (goto/16 l43bd6)
  (label l43e32)
  (line 163)
  (invoke-super {v7 v8 v9} antlr/Grammar/setOption [object java/lang/String] [object antlr/Token] )
  (move-result v3)
  (if-nez v3 l43bd6)
  (line 166)
  (iget-object v1 v7 antlr/LexerGrammar.antlrTool [object antlr/Tool])
  (new-instance v3 java/lang/StringBuilder)
  (const-string v4 "Invalid option: ")
  (invoke-direct {v3 v4} java/lang/StringBuilder/<init> [object java/lang/String] )
  (invoke-virtual {v3 v8} java/lang/StringBuilder/append [object java/lang/String] )
  (move-result-object v3)
  (invoke-virtual {v3} java/lang/StringBuilder/toString )
  (move-result-object v3)
  (invoke-virtual {v7} antlr/LexerGrammar/getFilename )
  (move-result-object v4)
  (invoke-virtual {v9} antlr/Token/getLine )
  (move-result v5)
  (invoke-virtual {v9} antlr/Token/getColumn )
  (move-result v6)
  (invoke-virtual {v1 v3 v4 v5 v6} antlr/Tool/error [object java/lang/String] [object java/lang/String] int int )
  (move v1 v2)
  (line 167)
  (goto/16 l43bd6)
)

)
